})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=input$x, y="sleep_total"))+
geom_density(alpha=0.6)+
labs(x="Vore type", y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=input$x, y="sleep_total", fill="vore"))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
ggplot(data=msleep,
aes_string(x=input$x, y="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
ggplot(data=msleep,
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
View(ui)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
View(msleep)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
library(shiny)
ui <- fluidPage(
selectInput("x", #we are naming the select input "x"
"Select X variable", # this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "bady_mass_g"),#one wrong parantheses==won't work
selected = "bill_length_mm"),
selectInput("y", #we are naming the select input "y"
"Select Y variable", # this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "bady_mass_g"),#one wrong parantheses==won't work
selected = "bill_length_mm")
) # this closes the fluid page
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", y=input$x, fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
ggplot(data=msleep,
aes_string(x="sleep_total", y=input$x, color=input$x))+
geom_density(alpha=0.6)
ggplot(data=msleep,
aes_string(x="sleep_total", y=input$x))+
geom_density(alpha=0.6)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", y=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", color=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", color=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", color=c(input$x)))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
vore_data <- msleep %>%
filter(vore==input$x)
ggplot(data=msleep,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
vore_data <- msleep %>%
filter(vore==input$x)
ggplot(data=vore_data,
aes_string(x="sleep_total", fill=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
View(msleep)
vore_data <- msleep %>%
filter(vore==input$x)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", fill="input$x"))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
ggplot(data=msleep,
aes_string(x="sleep_total"))+
geom_density(alpha=0.6)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total"))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="sleep_total", y=input$x))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
ggplot(data=msleep,
aes_string(x=input$x, y="sleep_total"))+
geom_density(alpha=0.6)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=input$x, y="sleep_total"))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=sleep_total))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(x=sleep_total))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
msleep %>%
ggplot(aes(x=sleep_total))+
geom_density(alpha=0.6)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
ggplot(aes(x=sleep_total))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(x=sleep_total))+
geom_density(alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(x=sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(title = "Total Sleep Time of Each Vore",
x="Total Sleep Time",
y=NULL)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha-0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Total Sleep Time"),
selectInput("x",
"Select X Variable",
choices = unique(msleep$vore),
selected = "carni"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
msleep %>%
filter(vore==input$x) %>%
ggplot(aes(x=sleep_total))+
geom_density(fill="steelblue", color="black", alpha=0.6)+
labs(title = "Total Sleep Time of Each Vore",
x="Total Sleep Time",
y=NULL)
})
}
shinyApp(ui, server)
