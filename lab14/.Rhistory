#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
runApp("plot_iris.R")
runExample("04_mpg")
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
names(penguins)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g))+
geom_point(na.rm=T)
library(shiny)
ui <- fluidPage(
selectInput("x", #we are naming the select input "x"
"Select X variable", # this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "bady_mass_g"),#one wrong parantheses==won't work
selected = "bill_length_mm")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", #we are naming the select input "x"
"Select X variable", # this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "bady_mass_g"),#one wrong parantheses==won't work
selected = "bill_length_mm"),
selectInput("y", #we are naming the select input "y"
"Select Y variable", # this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "bady_mass_g"),#one wrong parantheses==won't work
selected = "bill_length_mm")
) # this closes the fluid page
server <- function(input, output, session) {
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g, color=species))+
geom_point(na.rm=T)+
theme_light(base_size=14)
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point()
})
}
shinyApp(ui, server)
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
plotOutput("plot", width="500px", height = "400px")
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width="500px", height = "400px")
)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point(na.rm = T)+
theme(x="bill_lenght_mm", y="body_mass_g")
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x=input$x, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_point(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x="locomotion", fill=input$x))+ #x and y are strings so need to use aes_string
geom_bar(position = "dodge", alpha=0.8, color="black")+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off the sidebar
dashboardBody(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins,
aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
runApp('homerange_app_JL.R')
runApp('homerange_app_JL.R')
View(server)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
