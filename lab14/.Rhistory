homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x=locomotion, y=input$y, color="species"))+ #x and y are strings so need to use aes_string
geom_bar(na.rm = T)+
theme_light(base_size = 14)
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #defining the output
ggplot(data = homerange,
aes_string(x="locomotion", fill=input$x))+ #x and y are strings so need to use aes_string
geom_bar(position = "dodge", alpha=0.8, color="black")+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off the sidebar
dashboardBody(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins,
aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
runApp('homerange_app_JL.R')
runApp('homerange_app_JL.R')
View(server)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
msleep <- msleep
names(msleep)
msleep %>%
ggplot(aes(x=sleep_total, fill = vore))+
geom_boxplot()
msleep %>%
ggplot(aes(x=sleep_total, fill = vore))+
geom_boxplot()+
coord_flip()
msleep %>%
ggplot(aes(x=sleep_total, fill = vore))+
geom_boxplot()+
coord_flip()+
labs(title = "Total Sleep Time for Each Vore Diet",
x="Total Sleep Time")
msleep %>%
ggplot(aes(x=sleep_total, y=vore, fill = vore))+
geom_boxplot()+
coord_flip()+
labs(title = "Total Sleep Time for Each Vore Diet",
x="Total Sleep Time")
msleep %>%
ggplot(aes(x=sleep_total, y=vore, fill = vore))+
geom_boxplot()+
labs(title = "Total Sleep Time for Each Vore Diet",
x="Total Sleep Time")
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
install.packages("bslib")
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(bslib)
#install.packages("bslib")
call: loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]])
#install.packages("bslib")
?bslib
#install.packages("bslib")
??bslib
install.packages("fastmap")
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
install.packages("fastmap")
install.packages("fastmap")
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
library(fastmap)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
msleep <- msleep
names(msleep)
msleep %>%
ggplot(aes(x=sleep_total, y=vore, fill = vore))+
geom_boxplot()+
labs(title = "Total Sleep Time for Each Vore Diet",
x="Total Sleep Time")
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
installed_packages[, c("Package", "Version")]
installed_packages <- installed.packages()
installed_packages[, c("Package", "Version")]
install.packages("fastmap")
library(fastmap)
library(fastmap)
library(tidyverse)
library(janitor)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
msleep <- msleep
names(msleep)
msleep %>%
ggplot(aes(x=sleep_total, y=vore, fill = vore))+
geom_boxplot()+
labs(title = "Total Sleep Time for Each Vore Diet",
x="Total Sleep Time")
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="vore", fill=input$x))+
geom_boxplot(alpha=0.8)+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=input$x, fill=vore))+
geom_boxplot(alpha=0.8)+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=vore, fill=input$x))+
geom_boxplot(alpha=0.8, fill=vore)+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x=vore, fill=input$x))+
geom_boxplot()+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="vore", fill=input$x))+
geom_boxplot()+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="vore", fill=input$x))+
geom_boxplot()+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("msleep app"),
radioButtons("x",
"Select X Variable",
choices = c("sleep_total", "sleep_rem", "sleep_cycle", "awake"),
selected = "sleep_total"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=msleep,
aes_string(x="vore", fill=input$x))+
geom_boxplot()+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
