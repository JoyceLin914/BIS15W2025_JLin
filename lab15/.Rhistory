selectInput("x",
"Select X Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "p_h"),
selectInput("y",
"Select Y Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "conductivity"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$map <- renderLeaflet({
soil %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addMarkers(lng = -74.006, lat = 40.7128,
popup = "New York City")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Nematodes with Soils App"),
selectInput("x",
"Select X Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "p_h"),
selectInput("y",
"Select Y Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "conductivity")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$map <- renderLeaflet({
soil %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addMarkers(lng = -74.006, lat = 40.7128,
popup = "New York City")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Nematodes with Soils App"),
selectInput("x",
"Select X Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "p_h"),
selectInput("y",
"Select Y Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "conductivity"),
plotOutput("ggplot_map")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$map <- renderLeaflet({
soil %>%
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addMarkers(lng = -74.006, lat = 40.7128,
popup = "New York City")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Nematodes with Soils App"),
selectInput("x",
"Select X Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "p_h"),
selectInput("y",
"Select Y Variable",
choices = c("p_h", "conductivity", "temperature"),
selected = "conductivity"),
plotOutput("ggplot_map")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
View(soil)
library(mapdata)
install.packages("mapdata")
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(leaflet)
library(mapdata)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
library(readr)
library(dplyr)
improve_visibility <- read_csv("CA_visibility_data.csv", na=c("-999")) %>%
clean_names() %>%
select(date, site_name, state,svr_val) %>%
separate(date, into = c("month", "day", "year"))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Agua Tibia", "Bliss SP (TRPA)", "Bliss SP (TRPA) (RHTS)", "Death Valley NP", "Dome Lands Wilderness", "Fresno", "Hoover", "Joshua Tree NP", "Kaiser", "Lake Tahoe Community College", "Lassen Volcanic NP", "Lava Beds NM", "Owens Valley", "Pinnacles NM", "Point Reyes National Seashore", "Redwood NP", "San Gabriel", "San Gorgonio Wilderness", "San Rafael", "Sequoia NP", "Trinity", "Wrightwood", "Yosemite NP")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
output$plot <- renderPlot({
improve_visibility %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
library(readr)
library(dplyr)
soil <- read_xlsx("Soil_nematodes_all_data_final_Dryad.xlsx", na=c("NaN")) %>%clean_names()
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Agua Tibia", "Bliss SP (TRPA)", "Bliss SP (TRPA) (RHTS)", "Death Valley NP", "Dome Lands Wilderness", "Fresno", "Hoover", "Joshua Tree NP", "Kaiser", "Lake Tahoe Community College", "Lassen Volcanic NP", "Lava Beds NM", "Owens Valley", "Pinnacles NM", "Point Reyes National Seashore", "Redwood NP", "San Gabriel", "San Gorgonio Wilderness", "San Rafael", "Sequoia NP", "Trinity", "Wrightwood", "Yosemite NP")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
soil %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
)))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Bakori", "Budhal", "Darhal", "Thanamandi")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
soil %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
soil <- read_xlsx("Soil_nematodes_all_data_final_Dryad.xlsx", na=c("NaN")) %>%clean_names()
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Bakori", "Budhal", "Darhal", "Thanamandi")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
soil %>%
group_by(transect) %>%
#summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(transect==input$x) %>%
ggplot(aes(x=elevation, y=p_h,group=2, color=transect))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Agua Tibia", "Bliss SP (TRPA)", "Bliss SP (TRPA) (RHTS)", "Death Valley NP", "Dome Lands Wilderness", "Fresno", "Hoover", "Joshua Tree NP", "Kaiser", "Lake Tahoe Community College", "Lassen Volcanic NP", "Lava Beds NM", "Owens Valley", "Pinnacles NM", "Point Reyes National Seashore", "Redwood NP", "San Gabriel", "San Gorgonio Wilderness", "San Rafael", "Sequoia NP", "Trinity", "Wrightwood", "Yosemite NP")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
output$plot <- renderPlot({
improve_visibility %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Agua Tibia", "Bliss SP (TRPA)", "Bliss SP (TRPA) (RHTS)", "Death Valley NP", "Dome Lands Wilderness", "Fresno", "Hoover", "Joshua Tree NP", "Kaiser", "Lake Tahoe Community College", "Lassen Volcanic NP", "Lava Beds NM", "Owens Valley", "Pinnacles NM", "Point Reyes National Seashore", "Redwood NP", "San Gabriel", "San Gorgonio Wilderness", "San Rafael", "Sequoia NP", "Trinity", "Wrightwood", "Yosemite NP")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
output$plot <- renderPlot({
improve_visibility %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
ui <- fluidPage(imageOutput("picture", height = "600px", width = "100%"),
dashboardPage( skin = "black",
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
tags$head(
tags$style(HTML(".box{border-radius: 20px; box-shadow: 5px 5px 10px #888888;}"
))),
fluidRow( class="text center",
box(width = 2, height = 650,
radioButtons("x", "Choose The Site", choices = c("Agua Tibia", "Bliss SP (TRPA)", "Bliss SP (TRPA) (RHTS)", "Death Valley NP", "Dome Lands Wilderness", "Fresno", "Hoover", "Joshua Tree NP", "Kaiser", "Lake Tahoe Community College", "Lassen Volcanic NP", "Lava Beds NM", "Owens Valley", "Pinnacles NM", "Point Reyes National Seashore", "Redwood NP", "San Gabriel", "San Gorgonio Wilderness", "San Rafael", "Sequoia NP", "Trinity", "Wrightwood", "Yosemite NP")
)
),  #Close box
box(title = h2("Standard Visual Range Over the Year", align="center"), width = 6, height= 650, align="center",solidHeader = T,
plotOutput("plot", width = "550px", height = "525px")),
box(title="", width = 4, height = 650,
imageOutput("image"), style ="text-align: center;"
),
) #close fluidrow
) #close dashboardbody
) #close dashboard page
)
server <- function(input, output, session) {
output$plot <- renderPlot({
improve_visibility %>%
group_by(site_name, year) %>%
summarize("Mean_Standard_Visual_Range_km"= mean(svr_val, na.rm = T)) %>%
filter(site_name==input$x) %>%
ggplot(aes(x=year, y=Mean_Standard_Visual_Range_km,group=2, color=Mean_Standard_Visual_Range_km))+
geom_line(size=1.5,alpha=0.8)+
geom_point(size=5)+
theme(axis.title.x = element_text(size = 23, margin = margin(t = 15)))+
theme(axis.title.y = element_text(size = 23,  margin = margin(r = 20)))+
theme(axis.text = element_text(size = 14))+
labs(y = "Average Standard Visual Range (km)")+
labs(x = "Year")+
scale_color_gradient(low="blue", high="red")+
guides(color = FALSE)
})
output$image <- renderImage({
list(src = "map.png", height = "570px", width="450px")
}, deleteFile = FALSE)
output$picture <- renderImage({
list(src= "picture.jpg", height = "90%", width= "100%")
}, deleteFile = FALSE)
}
shinyApp(ui, server, options = list(launch.browser = TRUE))
register_stadiamaps("4adb0100-18d5-445d-b453-5dce6fb7dae9", write = FALSE)
library(ggmap)
register_stadiamaps("4adb0100-18d5-445d-b453-5dce6fb7dae9", write = FALSE)
soil %>%
select(latitude, longitude) %>% #get the range of the map
summary()
lat <- c(33.28, 33.57)
long <- c(74.32, 74.67)
bbox <- make_bbox(long, lat, f = 0.03)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
ggmap(map1)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=4)
ggmap(map1)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=9)
ggmap(map1)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=10)
ggmap(map1)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=12)
ggmap(map1)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=12)
ggmap(map1) +
geom_point(data = soil, aes(longitude, latitude), size=0.4) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Nematodes location")
# Load libraries
library(shiny)
library(leaflet)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Map in Shiny"),
sidebarLayout(
sidebarPanel(
helpText("This is an interactive map with a marker on Mount Everest!")
),
mainPanel(
leafletOutput("map")  # Output area for the map
)
)
)
# Define Server logic
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%  # Default OpenStreetMap tiles
setView(lng = 86.9250, lat = 27.9881, zoom = 8) %>%  # Zoom in on Mount Everest
addMarkers(lng = 86.9250, lat = 27.9881, popup = "Mount Everest 🏔️")
})
}
# Run the Shiny App
shinyApp(ui, server)
